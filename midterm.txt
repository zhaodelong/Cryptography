CS5153 Midterm 
Oct 22

1. Consider a permutation cipher over the alphabet {0,1,2,3,4,6,7,8,9} and of block length 8. Suppose that we learn that the message (0,1,0,2,0,4,9,7) is encrypted to (0,7,0,2,9,1,0,4) and the message (1,3,2,4,3,5,5,5) is encrypted to (2,5,1,4,5,3,3,5).

Plaintext: 
01020497
13243555
12345678

Ciphertext:
07029104
25135335
38147256

	(a) Recover the encrypt key and express it as a matrix.
		key: 36147852
		Encryption matrix
		0 0 1 0 0 0 0 0
		0 0 0 0 0 1 0 0
		1 0 0 0 0 0 0 0
		0 0 0 1 0 0 0 0
		0 0 0 0 0 0 1 0
		0 0 0 0 0 0 0 1
		0 0 0 0 1 0 0 0
		0 1 0 0 0 0 0 0
		Decryption Matrix
		0 0 1 0 0 0 0 0
		0 0 0 0 0 0 0 1
		1 0 0 0 0 0 0 0
		0 0 0 1 0 0 0 0
		0 0 0 0 0 0 1 0
		0 1 0 0 0 0 0 0
		0 0 0 0 1 0 0 0
		0 0 0 0 0 1 0 0


	(b) Decrpyt the ciphertext (1,3,4,8,3,0,5,6)
		Cipertext:46185330

	(c) Remove the first digit of your Student ID, treat the rest digits as a plaintext and encrypt it.
	ID - first digit: 13800046
	cipertext: 86104300

	(d) Remove the first digit of your student ID, treate the rest as ciphertext for this cipher, and decrypt it.
	ID - first digit: 13800046
	Decrypted: 80104603

	(e) Use this example to explain the weakness of a permutation cipher.
		The Permutation Cipher is easily to a known plaintext attack. If attacker knows both plaintext and ciphertext, then it is not difficult to determine the length and then find the key.

2. Create a text file that contains your name and ID number. Then computer the SHA1 hash of the file. (If you use linux, the shell command to compute SHA1 hash is sha1sum.)

	51e021e6d1ab66806f854c749042fbc1f4a10b34  nameID_SHA1.text

	Do you believe that there is another file somewhere on some computer that has the same hash value but has different content? Why?

	It's possible. From wikipedia, SHA1 theoretical attack in 2^61 operations. Considering the number of files on each computer and the number of computers, it's possible to have a collision. 

	Change one digit of the ID number, and recompute the SHA1 hash value.

	c11b4b731cb63bd74da0bd5e0ad1fee942daea76  nameID_SHA1.text

3. Define SHA1TRUN(x) to be the hash function that takes the first two bytes of the SHA1(x). Find one ASCII string that have the SHA1TRUN hash value zero. The string should start with your ID number (in ASCII encoding). There are many implementations of the SHA1 hash function. The documentation for SHA1 in Python can be found at:
http://docs.python.org/library/sha.html

Code:

import hashlib
from string import *
from itertools import *

found = False
ascii_all = ascii_letters + digits
for i in range(len(ascii_all)):
	if found:
		break
	print("Elements for permutation " + str(i + 1))
	permut = permutations(ascii_all, i + 1)
	permut = list(map("".join, permut))
	print("Number of permutations: " + str(len(permut)))
	for x in permut:
		in_str = "113800046"
		in_str = in_str + x
		m = hashlib.sha1()
		m.update(in_str)
		hex_hash = m.hexdigest()	
		if (hex_hash[0] == "0" and hex_hash[1] == "0" and hex_hash[2] == "0" and hex_hash[3] == "0"):
			print(in_str)
			print(hex_hash)
			found = True
			break
		in_str = "113800046"

print("Finished")


Result: 113800046gSj
HASH: 00005161a5fec4cc49f980cf250c31dff8a50bcb

4. Define SHA3_224TRUNk to be the hash function that outputs the first k bits of the SHA3_224 function. Find two different ASCII strings that have the same SHA3_224TRUNk hash value for some k. Both of the strings should start with your OU 4x4 name (in capital letters). Your grade depends on how large k you can manage to reach. You are allowed to use any online implementations of the SHA3_224 hash function, as long as you specify the source.


Best I can get on a 4 GB desktop is 11 hex which is 44 bits
zhao0046lQCY
zhao0046jAmU
f9260b74d73
f9260b74d73699e422835a8bfcb487f3714607324c1dcecbbb1cb0f1


